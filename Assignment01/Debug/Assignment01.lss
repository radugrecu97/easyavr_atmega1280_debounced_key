
Assignment01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fda  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d30  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057b  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005de  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  00002c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	3d d0       	rcall	.+122    	; 0x16c <main>
  f2:	9d c0       	rjmp	.+314    	; 0x22e <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <init_keys>:
#include <avr/io.h>

void init_keys()
{
	//configure port E as Sink
	DDRE = 0x00011000;
  f6:	1d b8       	out	0x0d, r1	; 13
  f8:	08 95       	ret

000000fa <get_key>:

// key_no [1..2], return true if key pressed
uint8_t get_key(uint8_t key_no)
{
	int8_t bit;
	if (key_no == 1)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	21 f0       	breq	.+8      	; 0x106 <get_key+0xc>
		bit = 4;
	else if (key_no == 2)
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	19 f4       	brne	.+6      	; 0x108 <get_key+0xe>
		bit = 5;
 102:	25 e0       	ldi	r18, 0x05	; 5
 104:	01 c0       	rjmp	.+2      	; 0x108 <get_key+0xe>
// key_no [1..2], return true if key pressed
uint8_t get_key(uint8_t key_no)
{
	int8_t bit;
	if (key_no == 1)
		bit = 4;
 106:	24 e0       	ldi	r18, 0x04	; 4
	else if (key_no == 2)
		bit = 5;
	
	//check if the output's bit is set for the desired key
	if (PINE & (1<<bit))
 108:	8c b1       	in	r24, 0x0c	; 12
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <get_key+0x18>
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	2a 95       	dec	r18
 114:	e2 f7       	brpl	.-8      	; 0x10e <get_key+0x14>
		return 1;
	else
		return 0;
}
 116:	81 70       	andi	r24, 0x01	; 1
 118:	08 95       	ret

0000011a <init_leds>:
#include <avr/io.h>

void init_leds()
{
	//set port H as output
	DDRH = 0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
 120:	08 95       	ret

00000122 <set_led>:
}

// led_no [1..8], state [0..1]
void set_led(uint8_t led_no, uint8_t state)
{
	if (state)
 122:	66 23       	and	r22, r22
 124:	89 f0       	breq	.+34     	; 0x148 <set_led+0x26>
		//set bit
		//led_no is subtracted from 8 so that it corresponds to the board's order (i.e. the 7th bit is actually LED1)
		PORTH |= 1<<(8-led_no);
 126:	e2 e0       	ldi	r30, 0x02	; 2
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	40 81       	ld	r20, Z
 12c:	28 e0       	ldi	r18, 0x08	; 8
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	28 1b       	sub	r18, r24
 132:	31 09       	sbc	r19, r1
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <set_led+0x1c>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <set_led+0x18>
 142:	84 2b       	or	r24, r20
 144:	80 83       	st	Z, r24
 146:	08 95       	ret
	else
	//clear bit
		PORTH &= ~(1<<(8-led_no));
 148:	e2 e0       	ldi	r30, 0x02	; 2
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	20 81       	ld	r18, Z
 14e:	48 e0       	ldi	r20, 0x08	; 8
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	48 1b       	sub	r20, r24
 154:	51 09       	sbc	r21, r1
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <set_led+0x3e>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	4a 95       	dec	r20
 162:	e2 f7       	brpl	.-8      	; 0x15c <set_led+0x3a>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <main>:
#include "led_driver.h"

int main(void)
{

	init_leds();
 16c:	d6 df       	rcall	.-84     	; 0x11a <init_leds>
	init_keys();
 16e:	c3 df       	rcall	.-122    	; 0xf6 <init_keys>
 170:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		//AND
		set_led(1, get_key(1) && get_key(2));
 172:	d1 e0       	ldi	r29, 0x01	; 1
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	c0 df       	rcall	.-128    	; 0xfa <get_key>
 17a:	88 23       	and	r24, r24
 17c:	39 f0       	breq	.+14     	; 0x18c <main+0x20>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	bc df       	rcall	.-136    	; 0xfa <get_key>
 182:	6d 2f       	mov	r22, r29
 184:	81 11       	cpse	r24, r1
 186:	03 c0       	rjmp	.+6      	; 0x18e <main+0x22>
 188:	61 2f       	mov	r22, r17
 18a:	01 c0       	rjmp	.+2      	; 0x18e <main+0x22>
 18c:	6c 2f       	mov	r22, r28
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	c8 df       	rcall	.-112    	; 0x122 <set_led>
		
		//OR
		set_led(2, get_key(1) || get_key(2));
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	b2 df       	rcall	.-156    	; 0xfa <get_key>
 196:	81 11       	cpse	r24, r1
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <main+0x3c>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	ae df       	rcall	.-164    	; 0xfa <get_key>
 19e:	6d 2f       	mov	r22, r29
 1a0:	81 11       	cpse	r24, r1
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <main+0x3e>
 1a4:	61 2f       	mov	r22, r17
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <main+0x3e>
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	82 e0       	ldi	r24, 0x02	; 2
		
		//XOR
		set_led(3, !get_key(1) ^ !get_key(2));
 1ac:	ba df       	rcall	.-140    	; 0x122 <set_led>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	a4 df       	rcall	.-184    	; 0xfa <get_key>
 1b2:	08 2f       	mov	r16, r24
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	a1 df       	rcall	.-190    	; 0xfa <get_key>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	01 11       	cpse	r16, r1
 1bc:	6c 2f       	mov	r22, r28
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	81 11       	cpse	r24, r1
 1c2:	9c 2f       	mov	r25, r28
 1c4:	69 27       	eor	r22, r25
 1c6:	83 e0       	ldi	r24, 0x03	; 3
		
		//NAND
		set_led(4, !(get_key(1) && get_key(2)));
 1c8:	ac df       	rcall	.-168    	; 0x122 <set_led>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	96 df       	rcall	.-212    	; 0xfa <get_key>
 1ce:	88 23       	and	r24, r24
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <main+0x74>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	92 df       	rcall	.-220    	; 0xfa <get_key>
 1d6:	6d 2f       	mov	r22, r29
 1d8:	88 23       	and	r24, r24
 1da:	19 f0       	breq	.+6      	; 0x1e2 <main+0x76>
 1dc:	61 2f       	mov	r22, r17
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <main+0x76>
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	84 e0       	ldi	r24, 0x04	; 4
		
		//NOR
		set_led(5, !(get_key(1) || get_key(2)));
 1e4:	9e df       	rcall	.-196    	; 0x122 <set_led>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	88 df       	rcall	.-240    	; 0xfa <get_key>
 1ea:	81 11       	cpse	r24, r1
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <main+0x90>
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	84 df       	rcall	.-248    	; 0xfa <get_key>
 1f2:	6d 2f       	mov	r22, r29
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <main+0x92>
 1f8:	61 2f       	mov	r22, r17
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <main+0x92>
 1fc:	6c 2f       	mov	r22, r28
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	90 df       	rcall	.-224    	; 0x122 <set_led>
		
		//XNOR
		set_led(6,  !(!get_key(1) ^ !get_key(2)));
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	7a df       	rcall	.-268    	; 0xfa <get_key>
 206:	08 2f       	mov	r16, r24
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	77 df       	rcall	.-274    	; 0xfa <get_key>
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	01 11       	cpse	r16, r1
 210:	01 c0       	rjmp	.+2      	; 0x214 <main+0xa8>
 212:	6c 2f       	mov	r22, r28
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	81 11       	cpse	r24, r1
 218:	9c 2f       	mov	r25, r28
 21a:	69 27       	eor	r22, r25
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	81 df       	rcall	.-254    	; 0x122 <set_led>
 220:	83 ec       	ldi	r24, 0xC3	; 195
 222:	99 e0       	ldi	r25, 0x09	; 9
 224:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0xb8>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0xbe>
 22a:	00 00       	nop
 22c:	a4 cf       	rjmp	.-184    	; 0x176 <main+0xa>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
